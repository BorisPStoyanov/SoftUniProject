<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Entity\Product;
use AppBundle\Entity\User;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{

    public function fetchCategoriesPromotions()
    {
        $today = new \DateTime();
        $qb = $this->createQueryBuilder('p');
        $qb->select(['MAX(p.percentage) as percent, c.id'])
            ->join('p.category', 'c')
            ->where($qb->expr()->lte('p.fromDate', ':today'))
            ->andWhere($qb->expr()->gte('p.toDate', ':today'))
            ->andWhere($qb->expr()->isNotNull('p.category'))
            ->setParameter(':today', $today->format('Y-m-d'))
            ->groupBy('c.id')
            ->orderBy('percent', 'DESC');
        $results = $qb->getQuery()->getResult();

        $promotions = [];
        foreach ($results as $promotion) {
            $promotions[(int)$promotion['id']] = (int)$promotion['percent'];
        }

        return $promotions;
    }

    public function fetchBiggestGeneralPromotion()
    {
        $today = new \DateTime();

        $qb = $this->createQueryBuilder('p');
        $qb->select(['p.percentage'])
            ->where($qb->expr()->lte('p.fromDate', ':today'))
            ->andWhere($qb->expr()->gte('p.toDate', ':today'))
            ->andWhere($qb->expr()->isNull('p.category'))
            ->setParameter(':today', $today->format('Y-m-d'))
            ->orderBy('p.percentage', 'DESC')
            ->setMaxResults(1);

        $query = $qb->getQuery();

        if ($query->getOneOrNullResult() !== null){
            return $query->getSingleScalarResult();
        }

        return 0;
    }


}
